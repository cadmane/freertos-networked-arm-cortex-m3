<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\rvmdk\boot_demo_eth.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\rvmdk\boot_demo_eth.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 728]: Last Updated: Sun Jul 11 17:19:12 2010
<BR><P>
<H3>Maximum Stack Usage =        424 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
lwIPEthernetIntHandler &rArr; stellarisif_interrupt &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2a08c90]">Reset_Handler</a>
 <LI><a href="#[2a08e70]">NmiSR</a>
 <LI><a href="#[2a08e34]">FaultISR</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[29d00a8]">EthernetPHYRead</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29d00a8]">EthernetPHYRead</a><BR>
 <LI><a href="#[27ec810]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27ec810]">SysCtlDelay</a><BR>
 <LI><a href="#[2a0917c]">SSIDataPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a0917c]">SSIDataPut</a><BR>
 <LI><a href="#[2a08e70]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a08e70]">NmiSR</a><BR>
 <LI><a href="#[2a08e34]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a08e34]">FaultISR</a><BR>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a08df8]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2a08c90]">Reset_Handler</a>
 <LI><a href="#[2a08e70]">NmiSR</a>
 <LI><a href="#[2a08e34]">FaultISR</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[171dcdc]">SysTickHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[29d1c14]">lwIPEthernetIntHandler</a>
 <LI><a href="#[2a08df8]">IntDefaultHandler</a>
 <LI><a href="#[171dca0]">main</a>
 <LI><a href="#[2a085c4]">SoftwareUpdateUDPReceive</a>
 <LI><a href="#[29d8f64]">dhcp_recv</a>
 <LI><a href="#[29d1d04]">ip_input</a>
 <LI><a href="#[29d1098]">stellarisif_init</a>
 <LI><a href="#[171dd18]">SoftwareUpdateRequestCallback</a>
 <LI><a href="#[29d2100]">etharp_output</a>
 <LI><a href="#[29d8c1c]">stellarisif_output</a>
 <LI><a href="#[29d0954]">tcp_recv_null</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2a08c90]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[27eaa4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[27eaa4c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2a08c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[27e9e1c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[27e9cf0]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[27e9a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[27e9cb4]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[27e9a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[27e9bc4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[27ec810]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[27ec810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[171da84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[27ec810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>

<P><STRONG><a name="[29fcabc]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[29d0030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[27eab00]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[29fca80]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[171dbec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[27ebeec]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[27ea77c]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29d0c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[29d1458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[29d1494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[29d2088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[29d21b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[29d2538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_reply
<LI><a href="#[29d8d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[27ea740]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29d07ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
</UL>

<P><STRONG><a name="[27ea704]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[27ea614]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27ea4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[27ea560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[27ea5d8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[27ea59c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[27ea560]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27ea614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[29d2484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
</UL>

<P><STRONG><a name="[27ea524]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29d042c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[29d0f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[29d222c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[27ea4e8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[27ea4ac]"></a>_memset$wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27ea614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[27ea3bc]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a06ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>

<P><STRONG><a name="[27ea1dc]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[29d2538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_reply
</UL>

<P><STRONG><a name="[27e9a98]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27e9cb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[27e9cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[27e9a5c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[29d02c4]"></a>EthernetConfigSet</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ethernet.o(i.EthernetConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[29d1098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_init
</UL>

<P><STRONG><a name="[29d0288]"></a>EthernetEnable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ethernet.o(i.EthernetEnable))
<BR><BR>[Called By]<UL><LI><a href="#[29d1098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_init
</UL>

<P><STRONG><a name="[29d024c]"></a>EthernetInitExpClk</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethernet.o(i.EthernetInitExpClk))
<BR><BR>[Called By]<UL><LI><a href="#[29d1098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_init
</UL>

<P><STRONG><a name="[29d0210]"></a>EthernetIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[29d1098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_init
<LI><a href="#[29d1c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPEthernetIntHandler
</UL>

<P><STRONG><a name="[29d01d4]"></a>EthernetIntDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[29d1098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_init
</UL>

<P><STRONG><a name="[29d0198]"></a>EthernetIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[29d1098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_init
</UL>

<P><STRONG><a name="[29d015c]"></a>EthernetIntStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[29d1098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_init
<LI><a href="#[29d1c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPEthernetIntHandler
</UL>

<P><STRONG><a name="[29d0120]"></a>EthernetMACAddrGet</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, ethernet.o(i.EthernetMACAddrGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EthernetMACAddrGet
</UL>
<BR>[Called By]<UL><LI><a href="#[29d1098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_init
</UL>

<P><STRONG><a name="[29d00e4]"></a>EthernetMACAddrSet</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, ethernet.o(i.EthernetMACAddrSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EthernetMACAddrSet
</UL>
<BR>[Called By]<UL><LI><a href="#[171d91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPInit
</UL>

<P><STRONG><a name="[29d00a8]"></a>EthernetPHYRead</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ethernet.o(i.EthernetPHYRead))
<BR><BR>[Calls]<UL><LI><a href="#[29d00a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetPHYRead
</UL>
<BR>[Called By]<UL><LI><a href="#[29d00a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetPHYRead
<LI><a href="#[29d8cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPServiceTimers
</UL>

<P><STRONG><a name="[171dc64]"></a>FlashUserGet</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, flash.o(i.FlashUserGet))
<BR><BR>[Called By]<UL><LI><a href="#[171dafc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareUpdateInit
<LI><a href="#[171dca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29fe9ac]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[171dc28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEthernetLED
<LI><a href="#[2a092a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[2a092e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
</UL>

<P><STRONG><a name="[2a09320]"></a>GPIOPadConfigSet</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[171dbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[171dc28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEthernetLED
<LI><a href="#[2a092a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[2a092e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[2a09398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[171dc28]"></a>GPIOPinTypeEthernetLED</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeEthernetLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeEthernetLED
</UL>
<BR>[Calls]<UL><LI><a href="#[29fe9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[2a09320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[171dca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a092e4]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[29fe9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[2a09320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[171dbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
</UL>

<P><STRONG><a name="[2a092a8]"></a>GPIOPinTypeSSI</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeSSI
</UL>
<BR>[Calls]<UL><LI><a href="#[29fe9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[2a09320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[171dbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[2a09398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[2a0926c]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[171dbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[2a09794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[2a097d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>

<P><STRONG><a name="[29d006c]"></a>IntEnable</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[29d1098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_init
</UL>

<P><STRONG><a name="[29d0030]"></a>IntMasterDisable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29fcabc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[29d132c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d1908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[29d1980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[29d19bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
<LI><a href="#[29d1a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[29d8c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_output
<LI><a href="#[29d939c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeue_packet
</UL>

<P><STRONG><a name="[171dbec]"></a>IntMasterEnable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[29fca80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[171dca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[29d0fe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>

<P><STRONG><a name="[2a09488]"></a>RIT128x96x4Clear</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rit128x96x4.o(i.RIT128x96x4Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RIT128x96x4Clear &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[2a09794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[2a097d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[171dbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
</UL>

<P><STRONG><a name="[2a09398]"></a>RIT128x96x4Enable</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, rit128x96x4.o(i.RIT128x96x4Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RIT128x96x4Enable &rArr; GPIOPinTypeSSI
</UL>
<BR>[Calls]<UL><LI><a href="#[171dac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[2a09104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIEnable
<LI><a href="#[2a09140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDisable
<LI><a href="#[2a091f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIConfigSetExpClk
<LI><a href="#[2a092a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[2a09320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[171dbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
</UL>

<P><STRONG><a name="[171dbb0]"></a>RIT128x96x4Init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, rit128x96x4.o(i.RIT128x96x4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RIT128x96x4Init &rArr; RIT128x96x4Clear &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[171da48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[2a0926c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[2a092a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[2a092e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[2a09320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[2a09398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
<LI><a href="#[2a09488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Clear
<LI><a href="#[2a097d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[171dca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171db74]"></a>RIT128x96x4StringDraw</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, rit128x96x4.o(i.RIT128x96x4StringDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[2a09794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[2a097d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[171dca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a09230]"></a>SSIBusy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssi.o(i.SSIBusy))
<BR><BR>[Called By]<UL><LI><a href="#[2a09794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[2a097d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>

<P><STRONG><a name="[2a091f4]"></a>SSIConfigSetExpClk</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ssi.o(i.SSIConfigSetExpClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSIConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[2a09398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[2a0917c]"></a>SSIDataPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssi.o(i.SSIDataPut))
<BR><BR>[Calls]<UL><LI><a href="#[2a0917c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0917c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[2a09794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[2a097d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>

<P><STRONG><a name="[2a09140]"></a>SSIDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIDisable))
<BR><BR>[Called By]<UL><LI><a href="#[2a09398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[2a09104]"></a>SSIEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIEnable))
<BR><BR>[Called By]<UL><LI><a href="#[2a09398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[171db38]"></a>SoftwareUpdateBegin</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, swupdate.o(i.SoftwareUpdateBegin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SoftwareUpdateBegin
</UL>
<BR>[Calls]<UL><LI><a href="#[2a07b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[171dca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171dafc]"></a>SoftwareUpdateInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, swupdate.o(i.SoftwareUpdateInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SoftwareUpdateInit &rArr; udp_new &rArr; memp_malloc &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[171dc64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashUserGet
<LI><a href="#[29d03f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[29d042c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[29d051c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[171dca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171dd18]"></a>SoftwareUpdateRequestCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, boot_demo_eth.o(i.SoftwareUpdateRequestCallback))
<BR>[Address Reference Count : 1]<UL><LI> boot_demo_eth.o(i.main)
</UL>
<P><STRONG><a name="[171dac0]"></a>SysCtlClockGet</STRONG> (Thumb, 438 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[171dca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[29d1098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_init
<LI><a href="#[2a09398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[171da84]"></a>SysCtlClockSet</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[27ec810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[171dca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171da48]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[171d91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPInit
<LI><a href="#[171dbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[171dca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171da0c]"></a>SysCtlPeripheralReset</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, sysctl.o(i.SysCtlPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysCtlPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[171dca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171d9d0]"></a>SysTickEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickEnable))
<BR><BR>[Called By]<UL><LI><a href="#[171dca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171dcdc]"></a>SysTickHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, boot_demo_eth.o(i.SysTickHandler))
<BR><BR>[Calls]<UL><LI><a href="#[171d8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2a07b74]"></a>SysTickIntDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[171db38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareUpdateBegin
</UL>

<P><STRONG><a name="[171d994]"></a>SysTickIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[171dca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171d958]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[171dca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27e969c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[27e9660]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[27e9624]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[29d2538]"></a>autoip_arp_reply</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, lwiplib.o(i.autoip_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = autoip_arp_reply &rArr; autoip_arp_announce &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[27ea1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[27ea77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29d2484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
<LI><a href="#[29d9414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_announce
</UL>
<BR>[Called By]<UL><LI><a href="#[29d21b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[29d2484]"></a>autoip_start</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lwiplib.o(i.autoip_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = autoip_start &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[27ea560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[29d1764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[29d19f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[29d93d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start_probing
</UL>
<BR>[Called By]<UL><LI><a href="#[29d2538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_reply
<LI><a href="#[29d8d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPPrivateInit
<LI><a href="#[29d9234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[29d2448]"></a>autoip_stop</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lwiplib.o(i.autoip_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = autoip_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[29d1764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>
<BR>[Called By]<UL><LI><a href="#[29d21f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[29d9360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[29d240c]"></a>autoip_tmr</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, lwiplib.o(i.autoip_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = autoip_tmr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d1674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[29d16b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[29d16ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[29d1728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[29d2088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[29d9414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_announce
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPServiceTimers
</UL>

<P><STRONG><a name="[29d23d0]"></a>dhcp_arp_reply</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lwiplib.o(i.dhcp_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d92ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>
<BR>[Called By]<UL><LI><a href="#[29d21b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[29d2394]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lwiplib.o(i.dhcp_coarse_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d2268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[29d8fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPServiceTimers
</UL>

<P><STRONG><a name="[29d2358]"></a>dhcp_fine_tmr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lwiplib.o(i.dhcp_fine_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d8eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPServiceTimers
</UL>

<P><STRONG><a name="[29d22a4]"></a>dhcp_release</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[29d1368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[29d16b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[29d16ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[29d1728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[29d1764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[29d8eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[29d9018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[29d90cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[29d9108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[29d9270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[29d92e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[29d2268]"></a>dhcp_renew</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[29d1368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[29d8eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[29d9018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[29d9054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[29d90cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[29d9108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[29d9270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[29d92e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[29d2394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[29d8eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[29d222c]"></a>dhcp_start</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, lwiplib.o(i.dhcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[27ea524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[29d03b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[29d042c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[29d04e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[29d051c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[29d19f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[29d1a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[29d21f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[29d9234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPPrivateInit
</UL>

<P><STRONG><a name="[29d21f0]"></a>dhcp_stop</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lwiplib.o(i.dhcp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_stop &rArr; udp_remove &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d03b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[29d1a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[29d2448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[29d222c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[29d21b4]"></a>etharp_arp_input</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, lwiplib.o(i.etharp_arp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = etharp_arp_input &rArr; autoip_arp_reply &rArr; autoip_arp_announce &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[27ea77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d23d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[29d2538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_reply
<LI><a href="#[29d8910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[29d1fd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[29d213c]"></a>etharp_ip_input</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lwiplib.o(i.etharp_ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = etharp_ip_input &rArr; update_arp_entry &rArr; find_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d8910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[29d1fd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[29d2100]"></a>etharp_output</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, lwiplib.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d13a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[29d1d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[29d20c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[29d8e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.stellarisif_init)
</UL>
<P><STRONG><a name="[29d20c4]"></a>etharp_query</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, lwiplib.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d132c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d1494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[29d15c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[29d1908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[29d1d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[29d204c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[29d8dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[29d8e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[29d2100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[29d9324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
</UL>

<P><STRONG><a name="[29d2088]"></a>etharp_raw</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, lwiplib.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[27ea77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d15c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[29d204c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[29d240c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
<LI><a href="#[29d9414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_announce
</UL>

<P><STRONG><a name="[29d204c]"></a>etharp_request</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lwiplib.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d2088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[29d1674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[29d20c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[29d2010]"></a>etharp_tmr</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lwiplib.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = etharp_tmr &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d8dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPServiceTimers
</UL>

<P><STRONG><a name="[29d1fd4]"></a>ethernet_input</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lwiplib.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d13a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d1d04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[29d213c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
<LI><a href="#[29d21b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>
<BR>[Called By]<UL><LI><a href="#[29d105c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_interrupt
</UL>

<P><STRONG><a name="[29d1ee4]"></a>icmp_input</STRONG> (Thumb, 398 bytes, Stack size 48 bytes, lwiplib.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = icmp_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d13a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d1494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[29d15c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[29d1c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[29d1d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[29d1df4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[29d1e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[29d1d04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[29d1e30]"></a>inet_chksum</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwiplib.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d8c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[29d1c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[29d1d04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[29d1ee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[29d8d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[29d1df4]"></a>inet_chksum_pbuf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lwiplib.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d8c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[29d1ee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[29d1db8]"></a>inet_chksum_pseudo</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lwiplib.o(i.inet_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d8c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[29d0468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[29d0558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[29d06fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[29d0828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[29d0bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[29d0be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[29d8a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[29d1d40]"></a>ip_addr_isbroadcast</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lwiplib.o(i.ip_addr_isbroadcast))
<BR><BR>[Called By]<UL><LI><a href="#[29d0468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[29d0be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[29d1d04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[29d1ee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[29d20c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[29d2100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[29d8910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>

<P><STRONG><a name="[29d1d04]"></a>ip_input</STRONG> (Thumb, 504 bytes, Stack size 40 bytes, lwiplib.o(i.ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[29d0be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[29d1200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[29d1368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d1d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[29d1e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[29d1ee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[29d8d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[29d1fd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.lwIPPrivateInit)
</UL>
<P><STRONG><a name="[29d1cc8]"></a>ip_output</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, lwiplib.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d1c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[29d1c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[29d06fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[29d0828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[29d0bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[29d8a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[29d8d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[29d1c8c]"></a>ip_output_if</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, lwiplib.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d13a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[29d1e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[29d1cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[29d1ee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[29d1c50]"></a>ip_route</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, lwiplib.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[29d1cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[29d8a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[29d1c14]"></a>lwIPEthernetIntHandler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwiplib.o(i.lwIPEthernetIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lwIPEthernetIntHandler &rArr; stellarisif_interrupt &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d015c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntStatus
<LI><a href="#[29d0210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntClear
<LI><a href="#[29d105c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_interrupt
<LI><a href="#[29d8cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPServiceTimers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[171d91c]"></a>lwIPInit</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lwiplib.o(i.lwIPInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lwIPInit &rArr; lwIPPrivateInit &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[171da48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[29d00e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetMACAddrSet
<LI><a href="#[29d8d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPPrivateInit
</UL>
<BR>[Called By]<UL><LI><a href="#[171dca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171d8e0]"></a>lwIPLocalIPAddrGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwiplib.o(i.lwIPLocalIPAddrGet))
<BR><BR>[Called By]<UL><LI><a href="#[171dca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171d8a4]"></a>lwIPTimer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lwiplib.o(i.lwIPTimer))
<BR><BR>[Called By]<UL><LI><a href="#[171dcdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickHandler
</UL>

<P><STRONG><a name="[29d1ae8]"></a>lwip_init</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, lwiplib.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_init &rArr; memp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[29d1944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[29d1a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPPrivateInit
</UL>

<P><STRONG><a name="[171dca0]"></a>main</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, boot_demo_eth.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = main &rArr; lwIPInit &rArr; lwIPPrivateInit &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[171d82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[171d868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usnprintf
<LI><a href="#[171d8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPLocalIPAddrGet
<LI><a href="#[171d91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPInit
<LI><a href="#[171d958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[171d994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntEnable
<LI><a href="#[171d9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
<LI><a href="#[171da0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[171da48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[171da84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[171dac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[171dafc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareUpdateInit
<LI><a href="#[171db38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareUpdateBegin
<LI><a href="#[171db74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[171dbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[171dbec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[171dc28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEthernetLED
<LI><a href="#[171dc64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashUserGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[29d1a70]"></a>mem_free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lwiplib.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[29d0fe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[29d8c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d21f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[29d222c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[29d8e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[29d91f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
</UL>

<P><STRONG><a name="[29d1a34]"></a>mem_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lwiplib.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[29d1ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[29d19f8]"></a>mem_malloc</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, lwiplib.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[29d15c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[29d222c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[29d2484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
<LI><a href="#[29d8e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
</UL>

<P><STRONG><a name="[29d19bc]"></a>mem_realloc</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, lwiplib.o(i.mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mem_realloc &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[29d0fe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[29d1368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[29d1980]"></a>memp_free</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lwiplib.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[29d0fe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[29d03b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[29d0648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[29d07b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[29d0be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[29d0c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[29d0e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[29d0fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d8910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[29d8dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
</UL>

<P><STRONG><a name="[29d1944]"></a>memp_init</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, lwiplib.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[29d1ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[29d1908]"></a>memp_malloc</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lwiplib.o(i.memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = memp_malloc &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[29d0fe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[29d042c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[29d07ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[29d0c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[29d0f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[29d15c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[29d20c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[29d18cc]"></a>netif_add</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lwiplib.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d17dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPPrivateInit
</UL>

<P><STRONG><a name="[29d17dc]"></a>netif_set_addr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwiplib.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d16b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[29d16ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[29d1728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[29d18cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[29d1764]"></a>netif_set_down</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwiplib.o(i.netif_set_down))
<BR><BR>[Called By]<UL><LI><a href="#[29d22a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[29d2448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_stop
<LI><a href="#[29d2484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
<LI><a href="#[29d8f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[29d1728]"></a>netif_set_gw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwiplib.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[29d17dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[29d22a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[29d240c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
<LI><a href="#[29d8f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[29d9360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[29d16ec]"></a>netif_set_ipaddr</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lwiplib.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[29d17dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[29d22a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[29d240c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
<LI><a href="#[29d8f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[29d9360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[29d16b0]"></a>netif_set_netmask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwiplib.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[29d17dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[29d22a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[29d240c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
<LI><a href="#[29d8f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[29d9360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[29d1674]"></a>netif_set_up</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lwiplib.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d204c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[29d240c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
<LI><a href="#[29d8d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPPrivateInit
<LI><a href="#[29d9360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[29d15c0]"></a>pbuf_alloc</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, lwiplib.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d1908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[29d19f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[29d0558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[29d06fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[29d0828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[29d0bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[29d0c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[29d1ee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[29d2088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[29d20c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[29d8be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_receive
<LI><a href="#[29d8d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[29d92e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>

<P><STRONG><a name="[29d1584]"></a>pbuf_cat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lwiplib.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[29d1548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[29d8988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[29d1548]"></a>pbuf_chain</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lwiplib.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pbuf_chain &rArr; pbuf_ref &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d132c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[29d1584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[29d150c]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwiplib.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[29d0c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[29d8988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[29d1494]"></a>pbuf_copy</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, lwiplib.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[27ea77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29d1ee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[29d20c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[29d1458]"></a>pbuf_copy_partial</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, lwiplib.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_copy_partial
</UL>
<BR>[Calls]<UL><LI><a href="#[27ea77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
</UL>

<P><STRONG><a name="[29d13e0]"></a>pbuf_free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lwiplib.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[29d0fe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[29d1980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[29d1a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[29d0468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[29d0558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[29d06fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[29d07b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[29d0828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[29d0954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[29d0a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[29d0bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[29d0be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[29d0c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[29d105c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_interrupt
<LI><a href="#[29d1368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[29d15c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[29d1d04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[29d1ee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[29d1fd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[29d2088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[29d20c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[29d21b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[29d8910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[29d8ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_transmit
<LI><a href="#[29d8c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_output
<LI><a href="#[29d8d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[29d8dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[29d8f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[29d9270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[2a085c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareUpdateUDPReceive
</UL>

<P><STRONG><a name="[29d13a4]"></a>pbuf_header</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lwiplib.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[29d0468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[29d0be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[29d0c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[29d1c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[29d1ee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[29d1fd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[29d2100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[29d8988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[29d1368]"></a>pbuf_realloc</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lwiplib.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pbuf_realloc &rArr; mem_realloc &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d19bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[29d1d04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[29d2268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[29d22a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[29d8988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[29d8ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[29d8f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[29d8fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[29d8fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[29d9234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[29d92ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[29d132c]"></a>pbuf_ref</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwiplib.o(i.pbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_ref &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[29d0fe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[29d07ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[29d1548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[29d20c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[29d8c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_output
</UL>

<P><STRONG><a name="[29d1200]"></a>raw_input</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, lwiplib.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[29d1d04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[29d1098]"></a>stellarisif_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, lwiplib.o(i.stellarisif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stellarisif_init &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[171dac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[29d006c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[29d0120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetMACAddrGet
<LI><a href="#[29d015c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntStatus
<LI><a href="#[29d0198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntEnable
<LI><a href="#[29d01d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntDisable
<LI><a href="#[29d0210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntClear
<LI><a href="#[29d024c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetInitExpClk
<LI><a href="#[29d0288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetEnable
<LI><a href="#[29d02c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetConfigSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.lwIPPrivateInit)
</UL>
<P><STRONG><a name="[29d105c]"></a>stellarisif_interrupt</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lwiplib.o(i.stellarisif_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = stellarisif_interrupt &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d1fd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[29d8ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_transmit
<LI><a href="#[29d8be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_receive
<LI><a href="#[29d939c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeue_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[29d1c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPEthernetIntHandler
</UL>

<P><STRONG><a name="[29d0fe4]"></a>sys_arch_unprotect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwiplib.o(i.sys_arch_unprotect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[171dbec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[29d132c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d1908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[29d1980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[29d19bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
<LI><a href="#[29d1a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[29d8c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_output
<LI><a href="#[29d939c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeue_packet
</UL>

<P><STRONG><a name="[29d0fa8]"></a>tcp_abandon</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, lwiplib.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[29d0828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[29d0a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[29d1980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[29d16ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[29d89c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[29d8b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[29d0f30]"></a>tcp_alloc</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, lwiplib.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[27ea524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[29d0af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[29d0fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[29d1908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[29d0e7c]"></a>tcp_close</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[29d0a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[29d0abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[29d1980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[29d0e04]"></a>tcp_debug_print</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_debug_print))
<BR><BR>[Called By]<UL><LI><a href="#[29d0be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[29d0cd8]"></a>tcp_eff_send_mss</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lwiplib.o(i.tcp_eff_send_mss))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[29d1c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[29d89c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[29d8b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[29d0c9c]"></a>tcp_enqueue</STRONG> (Thumb, 784 bytes, Stack size 64 bytes, lwiplib.o(i.tcp_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tcp_enqueue &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[27ea77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29d0774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[29d13a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d150c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[29d1584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[29d15c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[29d1908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[29d1980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[29d8b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[29d0c24]"></a>tcp_fasttmr</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tcp_fasttmr &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[29d0abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[29d060c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[29d0be8]"></a>tcp_input</STRONG> (Thumb, 848 bytes, Stack size 48 bytes, lwiplib.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[29d0954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[29d0a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcbs_sane
<LI><a href="#[29d0a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[29d0abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[29d0e04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_debug_print
<LI><a href="#[29d13a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d1980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[29d1d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[29d1db8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[29d894c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[29d89c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[29d8b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>
<BR>[Called By]<UL><LI><a href="#[29d1d04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[29d0bac]"></a>tcp_keepalive</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lwiplib.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tcp_keepalive &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d15c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[29d1cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[29d1db8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[29d8a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[29d0af8]"></a>tcp_next_iss</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[29d0f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[29d0abc]"></a>tcp_output</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, lwiplib.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d06fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[29d07b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[29d8a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[29d0864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[29d0918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[29d0a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[29d0be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[29d0c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[29d0e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[29d894c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[29d8988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[29d89c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[29d8b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[29d0a80]"></a>tcp_pcb_purge</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[29d0a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[29d89c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[29d0a44]"></a>tcp_pcb_remove</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcbs_sane
<LI><a href="#[29d0a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[29d0abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[29d0e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[29d0fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[29d0a08]"></a>tcp_pcbs_sane</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_pcbs_sane))
<BR><BR>[Called By]<UL><LI><a href="#[29d0a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[29d0be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[29d0954]"></a>tcp_recv_null</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lwiplib.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[29d0e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[29d0c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[29d0918]"></a>tcp_recved</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lwiplib.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d05d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[29d0abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[29d08dc]"></a>tcp_rexmit</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, lwiplib.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[29d08a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[29d89c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[29d08a0]"></a>tcp_rexmit_fast</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lwiplib.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[29d08dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[29d0864]"></a>tcp_rexmit_rto</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[29d0828]"></a>tcp_rst</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, lwiplib.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d15c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[29d1cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[29d1db8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[29d0be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[29d0fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[29d894c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[29d89c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[29d8b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[29d07ec]"></a>tcp_seg_copy</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_seg_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[27ea740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[29d132c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[29d1908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[29d07b0]"></a>tcp_seg_free</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d1980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[29d0abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[29d8988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[29d89c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[29d8ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[29d0774]"></a>tcp_segs_free</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d07b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[29d0a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[29d0c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[29d0fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[29d8ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[29d0738]"></a>tcp_send_ctrl</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_send_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcp_send_ctrl &rArr; tcp_enqueue &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0e7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[29d06fc]"></a>tcp_send_empty_ack</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lwiplib.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d15c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[29d1cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[29d1db8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[29d8a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[29d8988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[29d0648]"></a>tcp_slowtmr</STRONG> (Thumb, 570 bytes, Stack size 40 bytes, lwiplib.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[29d0774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[29d0828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[29d0864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[29d0a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[29d0abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[29d0bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[29d1980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[29d060c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[29d060c]"></a>tcp_tmr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lwiplib.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[29d0c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPServiceTimers
</UL>

<P><STRONG><a name="[29d05d0]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[29d8988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[29d0558]"></a>tcp_zero_window_probe</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, lwiplib.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tcp_zero_window_probe &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d15c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[29d1cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[29d1db8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[29d8a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[29d051c]"></a>udp_bind</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, lwiplib.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[171dafc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareUpdateInit
<LI><a href="#[29d0300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[29d04e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[29d222c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[29d04e0]"></a>udp_connect</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lwiplib.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = udp_connect &rArr; udp_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[29d051c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[29d222c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[29d0468]"></a>udp_input</STRONG> (Thumb, 446 bytes, Stack size 56 bytes, lwiplib.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = udp_input &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d13a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d1d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[29d1db8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[29d8d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[29d1d04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[29d042c]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lwiplib.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_new &rArr; memp_malloc &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[27ea524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[29d1908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[171dafc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareUpdateInit
<LI><a href="#[29d222c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[29d03f0]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwiplib.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[171dafc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareUpdateInit
</UL>

<P><STRONG><a name="[29d03b4]"></a>udp_remove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lwiplib.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = udp_remove &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d1980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[29d21f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[29d222c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[29d0300]"></a>udp_sendto_if</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, lwiplib.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d051c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[29d13a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d1548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[29d15c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[29d1c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[29d1db8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[29d2268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[29d22a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[29d8f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[29d8fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[29d8fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[29d9234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[29d92ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[171d868]"></a>usnprintf</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, ustdlib.o(i.usnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usnprintf &rArr; uvsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a06ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[171dca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171d82c]"></a>usprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, ustdlib.o(i.usprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usprintf &rArr; uvsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a06ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[171dca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a06ad0]"></a>uvsnprintf</STRONG> (Thumb, 572 bytes, Stack size 40 bytes, ustdlib.o(i.uvsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uvsnprintf &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27ea3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[171d82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[171d868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usnprintf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[29d9414]"></a>autoip_arp_announce</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lwiplib.o(i.autoip_arp_announce))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = autoip_arp_announce &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d2088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[29d240c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
<LI><a href="#[29d2538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_reply
</UL>

<P><STRONG><a name="[29d93d8]"></a>autoip_start_probing</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lwiplib.o(i.autoip_start_probing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = autoip_start_probing
</UL>
<BR>[Called By]<UL><LI><a href="#[29d2484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
</UL>

<P><STRONG><a name="[29d939c]"></a>dequeue_packet</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lwiplib.o(i.dequeue_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dequeue_packet &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[29d0fe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[29d105c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_interrupt
</UL>

<P><STRONG><a name="[29d9360]"></a>dhcp_bind</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, lwiplib.o(i.dhcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d1674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[29d16b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[29d16ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[29d1728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[29d2448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_stop
<LI><a href="#[29d8eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[29d8f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[29d9324]"></a>dhcp_check</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwiplib.o(i.dhcp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d20c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[29d8eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[29d8f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[29d92e8]"></a>dhcp_create_request</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, lwiplib.o(i.dhcp_create_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dhcp_create_request &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d15c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[29d2268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[29d22a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[29d8f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[29d8fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[29d8fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[29d9234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[29d92ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[29d92ac]"></a>dhcp_decline</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_decline))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dhcp_decline &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[29d1368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[29d8eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[29d9018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[29d9090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[29d90cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[29d9108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[29d9270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[29d92e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[29d23d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[29d9270]"></a>dhcp_delete_request</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lwiplib.o(i.dhcp_delete_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dhcp_delete_request &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[29d2268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[29d22a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[29d8f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[29d8fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[29d8fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[29d9234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[29d92ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[29d9234]"></a>dhcp_discover</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[29d1368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[29d2484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
<LI><a href="#[29d8eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[29d9018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[29d9054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[29d90cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[29d9108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[29d9270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[29d92e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[29d222c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[29d8eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[29d8f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[29d91f8]"></a>dhcp_free_reply</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwiplib.o(i.dhcp_free_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dhcp_free_reply &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[29d1a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[29d8f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[29d91bc]"></a>dhcp_get_option_long</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lwiplib.o(i.dhcp_get_option_long))
<BR><BR>[Called By]<UL><LI><a href="#[29d8f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[29d9144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[29d9180]"></a>dhcp_get_option_ptr</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lwiplib.o(i.dhcp_get_option_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dhcp_get_option_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[29d9144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[29d9144]"></a>dhcp_handle_ack</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, lwiplib.o(i.dhcp_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dhcp_handle_ack &rArr; dhcp_get_option_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[29d9180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
<LI><a href="#[29d91bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_long
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[29d9108]"></a>dhcp_option</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lwiplib.o(i.dhcp_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[29d2268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[29d22a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[29d8f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[29d8fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[29d8fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[29d9234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[29d92ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[29d90cc]"></a>dhcp_option_byte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwiplib.o(i.dhcp_option_byte))
<BR><BR>[Called By]<UL><LI><a href="#[29d2268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[29d22a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[29d8f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[29d8fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[29d8fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[29d9234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[29d92ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[29d9090]"></a>dhcp_option_long</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lwiplib.o(i.dhcp_option_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_long
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[29d8fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[29d92ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[29d9054]"></a>dhcp_option_short</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lwiplib.o(i.dhcp_option_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_short
</UL>
<BR>[Called By]<UL><LI><a href="#[29d2268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[29d8f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[29d8fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[29d8fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[29d9234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[29d9018]"></a>dhcp_option_trailer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lwiplib.o(i.dhcp_option_trailer))
<BR><BR>[Called By]<UL><LI><a href="#[29d2268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[29d22a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[29d8f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[29d8fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[29d8fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[29d9234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[29d92ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[29d8fdc]"></a>dhcp_rebind</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_rebind))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[29d1368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[29d8eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[29d9018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[29d9054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[29d90cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[29d9108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[29d9270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[29d92e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[29d2394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[29d8eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[29d8fa0]"></a>dhcp_reboot</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[29d1368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[29d8eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[29d9018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[29d9054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[29d9090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[29d90cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[29d9108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[29d9270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[29d92e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[29d8f64]"></a>dhcp_recv</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d16b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[29d16ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[29d1728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[29d1764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[29d8e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[29d8eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[29d8f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[29d9144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[29d9180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
<LI><a href="#[29d91bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_long
<LI><a href="#[29d91f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
<LI><a href="#[29d9234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[29d9324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[29d9360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.dhcp_start)
</UL>
<P><STRONG><a name="[29d8f28]"></a>dhcp_select</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dhcp_select &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[29d1368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[29d8eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[29d9018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[29d9054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[29d9090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[29d90cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[29d9108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[29d9270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[29d92e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[29d8f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[29d8eec]"></a>dhcp_set_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwiplib.o(i.dhcp_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[29d2268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[29d22a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[29d8f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[29d8f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[29d8fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[29d8fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[29d9234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[29d92ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[29d9324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[29d9360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[29d8eb0]"></a>dhcp_timeout</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, lwiplib.o(i.dhcp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d2268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[29d22a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[29d8f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[29d8fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[29d8fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[29d9234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[29d9324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[29d9360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[29d2358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[29d8e74]"></a>dhcp_unfold_reply</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_unfold_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dhcp_unfold_reply &rArr; dhcp_free_reply &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[29d1458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[29d19f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[29d1a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[29d91f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[29d8e38]"></a>etharp_send_ip</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lwiplib.o(i.etharp_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[29d20c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[29d2100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[29d8910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>

<P><STRONG><a name="[29d8dfc]"></a>find_entry</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, lwiplib.o(i.find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = find_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d8dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
</UL>
<BR>[Called By]<UL><LI><a href="#[29d20c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[29d8910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>

<P><STRONG><a name="[29d8dc0]"></a>free_etharp_q</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lwiplib.o(i.free_etharp_q))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d1980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[29d2010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[29d8dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>

<P><STRONG><a name="[29d8d84]"></a>icmp_send_response</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, lwiplib.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[27ea77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d15c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[29d1cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[29d1e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[29d1d04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[29d8d48]"></a>lwIPPrivateInit</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lwiplib.o(i.lwIPPrivateInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lwIPPrivateInit &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d1674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[29d18cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[29d1ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[29d222c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[29d2484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
</UL>
<BR>[Called By]<UL><LI><a href="#[171d91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPInit
</UL>

<P><STRONG><a name="[29d8cd0]"></a>lwIPServiceTimers</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, lwiplib.o(i.lwIPServiceTimers))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lwIPServiceTimers &rArr; dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d00a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetPHYRead
<LI><a href="#[29d060c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[29d2010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[29d2358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[29d2394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[29d240c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
</UL>
<BR>[Called By]<UL><LI><a href="#[29d1c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPEthernetIntHandler
</UL>

<P><STRONG><a name="[29d8c94]"></a>lwip_standard_chksum</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lwiplib.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[29d1db8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[29d1df4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[29d1e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>

<P><STRONG><a name="[29d8c58]"></a>plug_holes</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, lwiplib.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[29d1a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[29d8c1c]"></a>stellarisif_output</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lwiplib.o(i.stellarisif_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = stellarisif_output &rArr; stellarisif_transmit &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[29d0fe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[29d132c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d8ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.stellarisif_init)
</UL>
<P><STRONG><a name="[29d8be0]"></a>stellarisif_receive</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lwiplib.o(i.stellarisif_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stellarisif_receive &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d15c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[29d105c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_interrupt
</UL>

<P><STRONG><a name="[29d8ba4]"></a>stellarisif_transmit</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, lwiplib.o(i.stellarisif_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = stellarisif_transmit &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[29d105c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_interrupt
<LI><a href="#[29d8c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_output
</UL>

<P><STRONG><a name="[29d8b2c]"></a>tcp_listen_input</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, lwiplib.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[29d0abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[29d0c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[29d0cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[29d0f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[29d0fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[29d8a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[29d8ab4]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_oos_insert_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tcp_oos_insert_segment &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[29d07b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[29d1368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[29d8988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[29d8a78]"></a>tcp_output_segment</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, lwiplib.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d1c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[29d1cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[29d1db8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[29d8a3c]"></a>tcp_output_set_header</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, lwiplib.o(i.tcp_output_set_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_output_set_header
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[29d06fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[29d0bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[29d8a00]"></a>tcp_parseopt</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, lwiplib.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_parseopt
</UL>
<BR>[Called By]<UL><LI><a href="#[29d89c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[29d8b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[29d89c4]"></a>tcp_process</STRONG> (Thumb, 808 bytes, Stack size 32 bytes, lwiplib.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcp_process &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d07b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[29d0828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[29d08dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[29d0a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[29d0abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[29d0cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[29d0fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[29d8988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[29d8a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[29d8988]"></a>tcp_receive</STRONG> (Thumb, 1546 bytes, Stack size 32 bytes, lwiplib.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcp_receive &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d05d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[29d06fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[29d07b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[29d07ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[29d08a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[29d0abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[29d1368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[29d13a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[29d150c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[29d1584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[29d8ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[29d89c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[29d894c]"></a>tcp_timewait_input</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lwiplib.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[29d0828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[29d0abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[29d0be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[29d8910]"></a>update_arp_entry</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, lwiplib.o(i.update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = update_arp_entry &rArr; find_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29d1980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[29d1d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[29d8dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[29d8e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[29d213c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
<LI><a href="#[29d21b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[2a097d0]"></a>RITWriteCommand</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, rit128x96x4.o(i.RITWriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RITWriteCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0917c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[2a09230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIBusy
<LI><a href="#[2a0926c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[171db74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[171dbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[2a09488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Clear
</UL>

<P><STRONG><a name="[2a09794]"></a>RITWriteData</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, rit128x96x4.o(i.RITWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0917c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[2a09230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIBusy
<LI><a href="#[2a0926c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[171db74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[2a09488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Clear
</UL>

<P><STRONG><a name="[2a08e70]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2a08e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[2a08e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2a08e34]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2a08e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2a08e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2a08df8]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2a08df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a08df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2a085c4]"></a>SoftwareUpdateUDPReceive</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, swupdate.o(i.SoftwareUpdateUDPReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SoftwareUpdateUDPReceive &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[29d13e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> swupdate.o(i.SoftwareUpdateInit)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
